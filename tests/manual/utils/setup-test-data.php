<?php

/**
 * Setup test data for Content Generator testing
 * Creates: tenant user, pages, generations
 */

require __DIR__ . '/ainstein-laravel/vendor/autoload.php';

$app = require_once __DIR__ . '/ainstein-laravel/bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use App\Models\User;
use App\Models\Tenant;
use App\Models\Content;
use App\Models\ContentGeneration;
use App\Models\Prompt;

echo "🔧 SETUP TEST DATA\n";
echo "==================\n\n";

// Step 1: Find or create tenant
echo "1. Finding or creating tenant...\n";
$tenant = Tenant::first();

if (!$tenant) {
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'domain' => 'test.example.com',
        'status' => 'active',
        'settings' => json_encode([]),
    ]);
    echo "  ✅ Created new tenant: {$tenant->name}\n";
} else {
    echo "  ✅ Using existing tenant: {$tenant->name}\n";
}
echo "  Tenant ID: {$tenant->id}\n\n";

// Step 2: Find or create tenant user
echo "2. Finding or creating tenant user...\n";
$user = User::where('tenant_id', $tenant->id)->first();

if (!$user) {
    $user = User::create([
        'name' => 'Test User',
        'email' => 'testuser@example.com',
        'password' => bcrypt('password'),
        'tenant_id' => $tenant->id,
        'role' => 'admin',
        'email_verified_at' => now(),
    ]);
    echo "  ✅ Created new user: {$user->name}\n";
} else {
    echo "  ✅ Using existing user: {$user->name}\n";
}
echo "  User ID: {$user->id}\n";
echo "  Email: {$user->email}\n\n";

// Step 3: Create test pages
echo "3. Creating test pages...\n";
$pages = [];

for ($i = 1; $i <= 3; $i++) {
    $page = Content::create([
        'tenant_id' => $tenant->id,
        'url' => "/test-page-{$i}",
        'keyword' => "test keyword {$i}",
        'content_type' => 'article',
        'source' => 'manual',
        'status' => 'active',
        'language' => 'en',
    ]);
    $pages[] = $page;
    echo "  ✅ Created page {$i}: {$page->url}\n";
}
echo "\n";

// Step 4: Create or find system prompts
echo "4. Checking system prompts...\n";
$systemPrompts = Prompt::where('is_system', true)->get();

if ($systemPrompts->isEmpty()) {
    echo "  ⚠️  No system prompts found. Creating basic ones...\n";

    $promptData = [
        [
            'name' => 'Article Generator',
            'alias' => 'article',
            'content' => 'Write a comprehensive article about {keyword} for the page {url_path}.',
            'category' => 'content',
        ],
        [
            'name' => 'SEO Title',
            'alias' => 'seo_title',
            'content' => 'Generate an SEO-optimized title for a page about {keyword}.',
            'category' => 'seo',
        ],
        [
            'name' => 'Meta Description',
            'alias' => 'meta_description',
            'content' => 'Write an engaging meta description (150-160 chars) for a page about {keyword}.',
            'category' => 'seo',
        ],
    ];

    foreach ($promptData as $data) {
        $prompt = Prompt::create([
            'tenant_id' => null, // System prompt
            'name' => $data['name'],
            'alias' => $data['alias'],
            'content' => $data['content'],
            'category' => $data['category'],
            'is_system' => true,
            'is_active' => true,
        ]);
        echo "  ✅ Created system prompt: {$prompt->name}\n";
    }
} else {
    echo "  ✅ Found {$systemPrompts->count()} system prompts\n";
}
echo "\n";

// Step 5: Create test generations
echo "5. Creating test content generations...\n";
$generations = [];

// Get system prompts for linking
$articlePrompt = Prompt::where('alias', 'blog-article')->first();
$h1TitlePrompt = Prompt::where('alias', 'h1-title')->first();
$metaDescPrompt = Prompt::where('alias', 'meta-description')->first();

if (!$articlePrompt) {
    echo "  ⚠️  Blog article prompt not found, skipping generations\n\n";
} else {
    $generationData = [
        [
            'prompt_id' => $articlePrompt->id,
            'prompt_type' => 'article',
            'status' => 'completed',
            'content' => 'This is a complete test article generated by AI. It contains multiple paragraphs with useful information about the topic. The content is well-structured and engaging for readers.',
            'tokens' => 150,
        ],
        [
            'prompt_id' => $h1TitlePrompt ? $h1TitlePrompt->id : $articlePrompt->id,
            'prompt_type' => 'h1_title',
            'status' => 'completed',
            'content' => 'Complete Guide to Test Keywords 2025 | Expert Tips',
            'tokens' => 25,
        ],
        [
            'prompt_id' => $metaDescPrompt ? $metaDescPrompt->id : $articlePrompt->id,
            'prompt_type' => 'meta_description',
            'status' => 'completed',
            'content' => 'Discover everything you need to know about test keywords. Expert tips, best practices, and proven strategies for success.',
            'tokens' => 35,
        ],
        [
            'prompt_id' => $articlePrompt->id,
            'prompt_type' => 'article',
            'status' => 'failed',
            'content' => null,
            'tokens' => 0,
        ],
        [
            'prompt_id' => $articlePrompt->id,
            'prompt_type' => 'article',
            'status' => 'processing',
            'content' => null,
            'tokens' => 0,
        ],
    ];

    foreach ($generationData as $index => $data) {
        $page = $pages[$index % count($pages)];

        $prompt = Prompt::find($data['prompt_id']);

        $generation = ContentGeneration::create([
            'tenant_id' => $tenant->id,
            'page_id' => $page->id,
            'prompt_id' => $data['prompt_id'],
            'prompt_template' => $prompt ? $prompt->template : 'Default template',
            'prompt_type' => $data['prompt_type'],
            'status' => $data['status'],
            'generated_content' => $data['content'],
            'tokens_used' => $data['tokens'],
            'ai_model' => 'gpt-4o-mini',
            'notes' => "Test generation for {$data['prompt_type']}",
            'created_by' => $user->id,
        ]);

        $generations[] = $generation;
        echo "  ✅ Created generation: {$data['prompt_type']} ({$data['status']})\n";
    }
}
echo "\n";

// Summary
echo str_repeat("=", 50) . "\n";
echo "✅ TEST DATA SETUP COMPLETE\n";
echo str_repeat("=", 50) . "\n\n";

echo "Created:\n";
echo "  • Tenant: {$tenant->name} (ID: {$tenant->id})\n";
echo "  • User: {$user->name} ({$user->email})\n";
echo "  • Pages: " . count($pages) . "\n";
echo "  • Generations: " . count($generations) . "\n\n";

echo "You can now run tests with:\n";
echo "  php test-generation-crud.php\n";
echo "  php test-content-generator-browser.php\n\n";

echo "Login credentials:\n";
echo "  Email: {$user->email}\n";
echo "  Password: password\n\n";
