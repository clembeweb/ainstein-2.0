<?php

use App\Http\Controllers\TenantDashboardController;
use App\Http\Controllers\TenantPageController;
use App\Http\Controllers\TenantApiKeyController;
use App\Http\Controllers\TenantPromptController;
use App\Http\Controllers\TenantContentController;
use App\Http\Controllers\CrewController;
use App\Http\Controllers\CrewAgentController;
use App\Http\Controllers\CrewTaskController;
use App\Http\Controllers\CrewExecutionController;
use App\Http\Controllers\CrewTemplateController;
use App\Http\Controllers\TestOpenAIController;
use App\Http\Controllers\Auth\SocialAuthController;
use App\Http\Controllers\Auth\EmailVerificationController;
use App\Http\Controllers\Auth\PasswordResetController;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Auth;

// Landing page
Route::get('/', function () {
    return view('landing');
})->middleware(\App\Http\Middleware\CheckMaintenanceMode::class);

// Authentication routes
Route::get('/login', [App\Http\Controllers\Auth\AuthController::class, 'showLoginForm'])->name('login');
Route::post('/login', [App\Http\Controllers\Auth\AuthController::class, 'login']);
Route::get('/register', [App\Http\Controllers\Auth\AuthController::class, 'showRegistrationForm'])->name('register');
Route::post('/register', [App\Http\Controllers\Auth\AuthController::class, 'register']);
Route::post('/logout', [App\Http\Controllers\Auth\AuthController::class, 'logout'])->name('logout');

// Password Reset routes
Route::prefix('password')->group(function () {
    Route::get('/reset', [PasswordResetController::class, 'showLinkRequestForm'])->name('password.request');
    Route::post('/email', [PasswordResetController::class, 'sendResetLinkEmail'])->name('password.email');
    Route::get('/reset/{token}', [PasswordResetController::class, 'showResetForm'])->name('password.reset');
    Route::post('/reset', [PasswordResetController::class, 'reset'])->name('password.update');
});

// Email Verification routes
Route::middleware(['auth'])->group(function () {
    Route::get('/email/verify', [EmailVerificationController::class, 'notice'])->name('verification.notice');
    Route::post('/email/verification-notification', [EmailVerificationController::class, 'send'])->name('verification.send');
});
Route::get('/email/verify/{id}/{hash}', [EmailVerificationController::class, 'verify'])->name('verification.verify');

// Social Authentication routes
Route::prefix('auth')->group(function () {
    Route::get('/{provider}', [SocialAuthController::class, 'redirectToProvider'])->name('social.redirect')
        ->where('provider', 'google|facebook');
    Route::get('/{provider}/callback', [SocialAuthController::class, 'handleProviderCallback'])->name('social.callback')
        ->where('provider', 'google|facebook');
});

// Direct dashboard route (without prefix) - redirects to tenant dashboard
Route::get('/dashboard', [TenantDashboardController::class, 'index'])->middleware(['auth', \App\Http\Middleware\CheckMaintenanceMode::class, \App\Http\Middleware\EnsureTenantAccess::class])->name('dashboard');

// Tenant Dashboard Routes
Route::middleware(['auth', \App\Http\Middleware\CheckMaintenanceMode::class, \App\Http\Middleware\EnsureTenantAccess::class])->prefix('dashboard')->name('tenant.')->group(function () {
    // Dashboard
    Route::get('/', [TenantDashboardController::class, 'index'])->name('dashboard');
    Route::get('/analytics', [TenantDashboardController::class, 'analytics'])->name('analytics');

    // Content Generator (Unified: Pages + Generations + Prompts)
    Route::get('/content', [TenantContentController::class, 'index'])->name('content.index');
    Route::get('/content/create', [TenantContentController::class, 'create'])->name('content.create');
    Route::post('/content', [TenantContentController::class, 'store'])->name('content.store');
    Route::get('/content/{generation}', [TenantContentController::class, 'show'])->name('content.show');
    Route::get('/content/{generation}/edit', [TenantContentController::class, 'edit'])->name('content.edit');
    Route::put('/content/{generation}', [TenantContentController::class, 'update'])->name('content.update');
    Route::delete('/content/{generation}', [TenantContentController::class, 'destroy'])->name('content.destroy');

    // Pages Management (redirects to unified Content Generator)
    Route::get('/pages', function () {
        return redirect()->route('tenant.content.index', ['tab' => 'pages']);
    })->name('pages.index');
    Route::get('/pages/create', [TenantPageController::class, 'create'])->name('pages.create');
    Route::post('/pages', [TenantPageController::class, 'store'])->name('pages.store');
    Route::get('/pages/{page}', [TenantPageController::class, 'show'])->name('pages.show');
    Route::get('/pages/{page}/edit', [TenantPageController::class, 'edit'])->name('pages.edit');
    Route::put('/pages/{page}', [TenantPageController::class, 'update'])->name('pages.update');
    Route::delete('/pages/{page}', [TenantPageController::class, 'destroy'])->name('pages.destroy');
    Route::patch('/pages/bulk-status', [TenantPageController::class, 'bulkUpdateStatus'])->name('pages.bulk-status');
    Route::delete('/pages/bulk-delete', [TenantPageController::class, 'bulkDelete'])->name('pages.bulk-delete');

    // Prompts Management (redirects to unified Content Generator)
    Route::get('/prompts', function () {
        return redirect()->route('tenant.content.index', ['tab' => 'prompts']);
    })->name('prompts.index');
    Route::get('/prompts/create', [TenantPromptController::class, 'create'])->name('prompts.create');
    Route::post('/prompts', [TenantPromptController::class, 'store'])->name('prompts.store');
    Route::get('/prompts/{prompt}', [TenantPromptController::class, 'show'])->name('prompts.show');
    Route::get('/prompts/{prompt}/edit', [TenantPromptController::class, 'edit'])->name('prompts.edit');
    Route::put('/prompts/{prompt}', [TenantPromptController::class, 'update'])->name('prompts.update');
    Route::delete('/prompts/{prompt}', [TenantPromptController::class, 'destroy'])->name('prompts.destroy');
    Route::post('/prompts/{prompt}/duplicate', [TenantPromptController::class, 'duplicate'])->name('prompts.duplicate');
    Route::get('/prompts/{prompt}/details', [TenantContentController::class, 'getPromptDetails'])->name('prompts.details');

    // API Keys Management
    Route::get('/api-keys', [TenantApiKeyController::class, 'index'])->name('api-keys.index');
    Route::post('/api-keys/generate', [TenantApiKeyController::class, 'generate'])->name('api-keys.generate');
    Route::get('/api-keys/{apiKey}', [TenantApiKeyController::class, 'show'])->name('api-keys.show');
    Route::put('/api-keys/{apiKey}', [TenantApiKeyController::class, 'update'])->name('api-keys.update');
    Route::patch('/api-keys/{apiKey}/revoke', [TenantApiKeyController::class, 'revoke'])->name('api-keys.revoke');
    Route::patch('/api-keys/{apiKey}/activate', [TenantApiKeyController::class, 'activate'])->name('api-keys.activate');
    Route::delete('/api-keys/{apiKey}', [TenantApiKeyController::class, 'destroy'])->name('api-keys.destroy');
    Route::get('/api-keys/{apiKey}/usage', [TenantApiKeyController::class, 'usage'])->name('api-keys.usage');

    // OAuth Settings routes
    Route::prefix('settings/oauth')->name('settings.oauth.')->group(function () {
        Route::get('/', [\App\Http\Controllers\Tenant\OAuthSettingsController::class, 'index'])->name('index');
        Route::put('/google', [\App\Http\Controllers\Tenant\OAuthSettingsController::class, 'updateGoogle'])->name('google.update');
        Route::put('/facebook', [\App\Http\Controllers\Tenant\OAuthSettingsController::class, 'updateFacebook'])->name('facebook.update');
        Route::post('/test/{provider}', [\App\Http\Controllers\Tenant\OAuthSettingsController::class, 'test'])->name('test');
        Route::post('/toggle/{provider}', [\App\Http\Controllers\Tenant\OAuthSettingsController::class, 'toggle'])->name('toggle');
        Route::get('/clear/{provider}', [\App\Http\Controllers\Tenant\OAuthSettingsController::class, 'clear'])->name('clear');
    });

    // Legacy dashboard routes (for backward compatibility)
    Route::get('/pages-old', [TenantDashboardController::class, 'pages'])->name('pages-old');
    // Route::get('/prompts', [TenantDashboardController::class, 'prompts'])->name('prompts'); // DISABLED - conflicts with prompts.index
    Route::get('/generations', [TenantDashboardController::class, 'contentGenerations'])->name('generations');
    Route::get('/generations/{generation}', [TenantDashboardController::class, 'showGeneration'])->name('generation.show');
    Route::get('/settings', [TenantDashboardController::class, 'settings'])->name('settings');

    // Legacy API key routes (for backward compatibility)
    Route::get('/api-keys-old', [TenantDashboardController::class, 'apiKeys'])->name('api-keys-old');
    Route::post('/api-keys-old', [TenantDashboardController::class, 'createApiKey'])->name('api-keys.create-old');
    Route::patch('/api-keys-old/{key}/revoke', [TenantDashboardController::class, 'revokeApiKey'])->name('api-keys.revoke-old');

    // Onboarding routes
    Route::post('/onboarding/complete', [\App\Http\Controllers\OnboardingController::class, 'complete'])->name('onboarding.complete');
    Route::post('/onboarding/reset', [\App\Http\Controllers\OnboardingController::class, 'reset'])->name('onboarding.reset');
    Route::get('/onboarding/status', [\App\Http\Controllers\OnboardingController::class, 'status'])->name('onboarding.status');

    // Tool-specific onboarding routes
    Route::post('/onboarding/tool/{tool}/complete', [\App\Http\Controllers\OnboardingController::class, 'completeToolOnboarding'])->name('onboarding.tool.complete');
    Route::post('/onboarding/tool/{tool}/reset', [\App\Http\Controllers\OnboardingController::class, 'resetToolOnboarding'])->name('onboarding.tool.reset');

    // Campaign Generator routes
    Route::get('/campaigns', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'index'])->name('campaigns.index');
    Route::get('/campaigns/create', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'create'])->name('campaigns.create');
    Route::post('/campaigns', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'store'])->name('campaigns.store');
    Route::get('/campaigns/{id}', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'show'])->name('campaigns.show');
    Route::get('/campaigns/{id}/edit', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'edit'])->name('campaigns.edit');
    Route::put('/campaigns/{id}', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'update'])->name('campaigns.update');
    Route::post('/campaigns/{id}/regenerate', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'regenerate'])->name('campaigns.regenerate');
    Route::get('/campaigns/{id}/export/{format?}', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'export'])->name('campaigns.export');
    Route::delete('/campaigns/{id}', [\App\Http\Controllers\Tenant\CampaignGeneratorController::class, 'destroy'])->name('campaigns.destroy');

    // CrewAI Management routes
    Route::prefix('crews')->name('crews.')->group(function () {
        // Main crew CRUD
        Route::get('/', [CrewController::class, 'index'])->name('index');
        Route::get('/create', [CrewController::class, 'create'])->name('create');
        Route::post('/', [CrewController::class, 'store'])->name('store');
        Route::get('/{crew}', [CrewController::class, 'show'])->name('show');
        Route::get('/{crew}/edit', [CrewController::class, 'edit'])->name('edit');
        Route::put('/{crew}', [CrewController::class, 'update'])->name('update');
        Route::delete('/{crew}', [CrewController::class, 'destroy'])->name('destroy');
        Route::post('/{crew}/clone', [CrewController::class, 'clone'])->name('clone');

        // Agent management (nested under crew)
        Route::post('/{crew}/agents', [CrewAgentController::class, 'store'])->name('agents.store');
        Route::put('/{crew}/agents/{agent}', [CrewAgentController::class, 'update'])->name('agents.update');
        Route::delete('/{crew}/agents/{agent}', [CrewAgentController::class, 'destroy'])->name('agents.destroy');
        Route::post('/{crew}/agents/reorder', [CrewAgentController::class, 'reorder'])->name('agents.reorder');

        // Task management (nested under crew)
        Route::post('/{crew}/tasks', [CrewTaskController::class, 'store'])->name('tasks.store');
        Route::put('/{crew}/tasks/{task}', [CrewTaskController::class, 'update'])->name('tasks.update');
        Route::delete('/{crew}/tasks/{task}', [CrewTaskController::class, 'destroy'])->name('tasks.destroy');
        Route::post('/{crew}/tasks/reorder', [CrewTaskController::class, 'reorder'])->name('tasks.reorder');

        // Crew execution
        Route::post('/{crew}/execute', [CrewExecutionController::class, 'execute'])->name('execute');
    });

    // Crew Execution Management routes
    Route::prefix('crew-executions')->name('crew-executions.')->group(function () {
        Route::get('/', [CrewExecutionController::class, 'index'])->name('index');
        Route::get('/{execution}', [CrewExecutionController::class, 'show'])->name('show');
        Route::post('/{execution}/cancel', [CrewExecutionController::class, 'cancel'])->name('cancel');
        Route::post('/{execution}/retry', [CrewExecutionController::class, 'retry'])->name('retry');
        Route::get('/{execution}/logs', [CrewExecutionController::class, 'logs'])->name('logs');
        Route::delete('/{execution}', [CrewExecutionController::class, 'destroy'])->name('destroy');
    });

    // Crew Template Management routes
    Route::prefix('crew-templates')->name('crew-templates.')->group(function () {
        Route::get('/', [CrewTemplateController::class, 'index'])->name('index');
        Route::get('/create', [CrewTemplateController::class, 'create'])->name('create');
        Route::post('/', [CrewTemplateController::class, 'store'])->name('store');
        Route::get('/{template}', [CrewTemplateController::class, 'show'])->name('show');
        Route::get('/{template}/edit', [CrewTemplateController::class, 'edit'])->name('edit');
        Route::put('/{template}', [CrewTemplateController::class, 'update'])->name('update');
        Route::delete('/{template}', [CrewTemplateController::class, 'destroy'])->name('destroy');
        Route::post('/{template}/use', [CrewTemplateController::class, 'use'])->name('use');
        Route::post('/{template}/publish', [CrewTemplateController::class, 'publish'])->name('publish');
    });

    // Crew Agent Tools API (for AJAX)
    Route::get('/crew-agent-tools', [CrewAgentController::class, 'getAvailableTools'])->name('crew-agent-tools.index');
});

// API Documentation
Route::get('/api/docs', function () {
    return view('api.docs');
})->name('api.docs');

// OpenAI Service Testing (for development/testing only)
Route::prefix('test-openai')->group(function () {
    Route::get('/', [TestOpenAIController::class, 'index']);
    Route::post('/chat', [TestOpenAIController::class, 'testChat']);
    Route::post('/completion', [TestOpenAIController::class, 'testCompletion']);
    Route::post('/json', [TestOpenAIController::class, 'testJSON']);
    Route::post('/embeddings', [TestOpenAIController::class, 'testEmbeddings']);
    Route::post('/error', [TestOpenAIController::class, 'testError']);
});

// Public routes
Route::get('/health', function () {
    return response()->json([
        'status' => 'healthy',
        'timestamp' => now()->toISOString(),
        'version' => '1.0.0'
    ]);
})->name('health');

// Maintenance mode check for all routes
Route::middleware(\App\Http\Middleware\CheckMaintenanceMode::class)->group(function () {
    // All routes are wrapped in maintenance mode check
});
